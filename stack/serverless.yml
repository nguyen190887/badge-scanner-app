service: badge-scanner-api
app: badge-scanner-app

plugins:
  - serverless-appsync-plugin
  - serverless-offline

custom:
  stage: ${self:provider.stage}
  googlePrivateKey: ${ssm:${file(./ssm-params.json):PrivateKey}}
  googleClientEmail: ${ssm:${file(./ssm-params.json):ClientEmail}}
  sheetId: ${ssm:${file(./ssm-params.json):SheetId}}
  websiteBucket: "kka.sharing-tracker-web-${self:custom.stage}"
  imageBucket: "kka.shaing-tracker-image-store-${self:custom.stage}"
  # appsync-offline:
  #   port: 62222
  appSync:
    region: ${self:provider.region}
    name: ${self:service.name}-${self:custom.stage}
    schema: schema.graphql
    authenticationType: API_KEY
    serviceRole: "${self:service.name}-AppSyncServiceRole"
    mappingTemplates:
      - type: Query
        dataSource: GoogleSheetDataSource
        field: allTopics
        request: "all-topics-request.vtl"
        response: "common-response.vtl"
      - type: Query
        dataSource: GoogleSheetDataSource
        field: topic
        request: "topic-request.vtl"
        response: "common-response.vtl"
      - type: Query
        dataSource: GoogleSheetDataSource
        field: topicAttendance
        request: "topic-attendance-request.vtl"
        response: "common-response.vtl"
      - type: Mutation
        dataSource: GoogleSheetWriteDataSource
        field: addTrackingRow
        request: "write-tracking-row-request.vtl"
        response: "common-response.vtl"
      - type: Mutation
        dataSource: LambdaSource
        field: addTrackingRowWithPhoto
        request: "write-tracking-row-request.vtl"
        response: "common-response.vtl"
      - type: Mutation
        dataSource: GoogleSheetWriteDataSource
        field: submitSurvey
        request: "submit-survey-request.vtl"
        response: "common-response.vtl"
    dataSources:
      - type: AWS_LAMBDA
        name: LambdaSource
        description: "Lambda DataSource"
        config:
          functionName: process-image-fn
      - type: AWS_LAMBDA
        name: GoogleSheetDataSource
        description: "GoogleSheet DataSource"
        config:
          functionName: read-from-sheet-fn
      - type: AWS_LAMBDA
        name: GoogleSheetWriteDataSource
        description: "GoogleSheet WriteDataSource"
        config:
          functionName: write-to-sheet-fn

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudwatch:*"
        - "log:*"
        - "rekognition:DetectText"
        - "s3:*"
        - "lambda:InvokeFunction"
      Resource: "*"

functions:
  badge-scanner-fn:
    handler: handler.index

  graphql-fn:
    handler: graphqlHandler.index

  process-image-fn:
    handler: handlers/processImageHandler.index
    environment:
      S3_ARN: { "Fn::GetAtt" : [ "ImageStore", "Arn" ] }
      SHEET_UPDATING_LAMBDA: "${self:service.name}-${self:custom.stage}-write-to-sheet-fn" #todo: find better way
    # events:
    #   - s3:
    #       bucket: ${self:custom.imageBucket}
    #       events: s3:ObjectCreated:*
    #       existing: true

  write-to-sheet-fn:
    handler: handlers/writeSheetHandler.index
    environment:
      PRIVATE_KEY: ${self:custom.googlePrivateKey}
      CLIENT_EMAIL: ${self:custom.googleClientEmail}
      SHEET_ID: ${self:custom.sheetId}

  read-from-sheet-fn:
    handler: handlers/readSheetHandler.index
    environment:
      PRIVATE_KEY: ${self:custom.googlePrivateKey}
      CLIENT_EMAIL: ${self:custom.googleClientEmail}
      SHEET_ID: ${self:custom.sheetId}

resources:
  - ${file(resources/s3-image-bucket.yml)}
  - ${file(resources/s3-website-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
